{"version":3,"sources":["Components/common/FormsControls/FormsControls.module.css","validators/validators.tsx","Components/common/FormsControls/FormsControls.tsx","hoc/withAuthRedirect.tsx","Components/common/tenor/tenor.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","assets/img/tenor.gif","Components/common/tenor/tenor.tsx","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/My-posts/MyPosts.module.css","Components/Profile/My-posts/Post/Post1.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/My-posts/Post/Post1.tsx","Components/Profile/My-posts/Post/AddNewPostReduxForm.tsx","Components/Profile/My-posts/MyPosts.tsx","Components/Profile/My-posts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","requiredField","value","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","element","className","style","formControl","Textarea","props","restProps","child","Input","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","to","React","connect","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","Tenor","s","content","src","tenor","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","type","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","ProfileInfo","profile","descriptionBlock","photos","large","Post1","item","alt","message","likesCount","id","maxLength10","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","name","placeholder","validate","MyPosts","memo","console","log","postsElements","posts","map","p","postBlock","values","addPost","newPostText","MyPostsContainer","profilePage","dispatch","text","addPostAC","Profile","ProfileContainer","userId","match","params","authorisedUserId","history","getUserProfile","getStatus","Number","compose","withRouter"],"mappings":"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","file":"static/js/4.66de123b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__wIBbp\",\"error\":\"FormsControls_error__fVdQ7\",\"formSummaryError\":\"FormsControls_formSummaryError__1lCuv\",\"password\":\"FormsControls_password__2Kl3v\",\"password-control\":\"FormsControls_password-control__2n0rD\",\"view\":\"FormsControls_view__2bN__\"};","import React from 'react';\r\n\r\nexport const requiredField = (value:any) => {\r\n    if (value)return undefined\r\n    return 'Field is required';\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const maxLengthCreator= (maxLength:any) => (value:any) => {\r\n    if (value && value.length > maxLength)return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n\r\n}\r\n/*export const maxLength30 = (value:any) => {\r\n    if (value && value.length > 30)return \"Max length is 30 symbols\"\r\n    return undefined;\r\n\r\n}*/\r\n\r\n\r\n","import React from 'react';\r\nimport style from './FormsControls.module.css';\r\nimport {Field} from \"redux-form\";\r\nimport {requiredField} from \"../../../validators/validators\";\r\n\r\n\r\ntype TextareaPropsType = HTMLFormElement & { placeholder: string }\r\n\r\n\r\n/*\r\n\r\nexport const Textarea = (props:any) => {\r\n    const {input,meta,child,...restProps} = props\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={style.formControl  + \" \" + (hasError ? style.error: \"\")}>\r\n            <div>\r\n                <textarea {...props.input} {...props}/>\r\n            </div>\r\n            {hasError &&<span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = (props:any) => {\r\n    const {input,meta,child,...restProps} = props\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={style.formControl  + \" \" + (hasError ? style.error: \"\")}>\r\n            <div>\r\n                <textarea {...props.input} {...props}/>\r\n            </div>\r\n            {hasError &&<span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}*/\r\nconst FormControl = ({input, meta:{touched, error}, children, element}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span className={style.error}>{error}</span>}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}></input></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: any, name: any, validators: any, component: any, props:any ={}, text:string = \"\") =>\r\n    <div> <Field placeholder={placeholder}\r\n                 name={name} component={validators}\r\n                 validate={component} {...props}/>{text}</div>","import React from \"react\";\r\nimport {Redirect} from \"react-router\";\r\nimport {AppStateType} from \"../Redux/Redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n\r\n        render() {\r\n\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"tenor_content__aFHiD\"};","import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default __webpack_public_path__ + \"static/media/tenor.66e2f987.gif\";","import tenor from \"../../../assets/img/tenor.gif\";\r\nimport React from \"react\";\r\nimport s from \"./tenor.module.css\"\r\n\r\n\r\nlet Tenor = () => {\r\n    return <div className={s.content}>\r\n         <img src={tenor}/>\r\n            </div>\r\n}\r\nexport default Tenor","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1pv1B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3nKPT\",\"posts\":\"MyPosts_posts__2AnLT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post1_item__f7ha7\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\nexport type ProfileStatusWithHooksPropsType = {\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props:ProfileStatusWithHooksPropsType) =>\r\n\r\n{\r\n    /*let stateWithSetState =useState(false)\r\n    let editMode = stateWithSetState[0]\r\n    let setEditMode = stateWithSetState [1]*/\r\nlet [editMode, setEditMode] = useState(false)\r\nlet [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n\r\n    const activateEditMode=()=>{\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n       setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n\r\n   const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n\r\n        return <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"No status\"} </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input type=\"text\"\r\n                       autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       onChange={onStatusChange}\r\n                       value={status}\r\n                       />\r\n            </div>\r\n            }\r\n        </div>\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Tenor from \"../../common/tenor/tenor\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\nconst ProfileInfo = (props:ProfileInfoPropsType) => {\r\n    if (!props.profile){\r\n        return <Tenor/>\r\n    }\r\n    return <div >\r\n        <div className={s.descriptionBlock}>\r\n            <img src={props.profile.photos.large}/>\r\n            <ProfileStatusWithHooks  status={props.status} updateStatus={props.updateStatus}/>\r\n        </div>\r\n    </div>\r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post1.module.css';\r\n\r\ntype Post1PropsType ={\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n\r\n\r\n}\r\n\r\nconst Post1 = (props: Post1PropsType) => {\r\n\r\n\r\n    return <div className={s.item}>\r\n\r\n        <img src=\"https://cdn1.iconfinder.com/data/icons/ios-web-user-interface-hand-drawn-vol-1/512/338Big_emoji_face_happy_smile_smiley-512.png\" alt =\"\"/>\r\n        {props.message}\r\n\r\n        <div>\r\n           <span>Like</span> {props.likesCount}\r\n        </div>\r\n\r\n        <div>\r\n            {/*<button onClick={props.removePost(props.id)}>delete post</button>*/}\r\n            <button >delete post</button>\r\n            <button >{props.id}</button>\r\n        </div>\r\n\r\n    </div>\r\n}\r\nexport default Post1;","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, requiredField} from \"../../../../validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\n\r\nexport type PostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\nconst maxLength10=maxLengthCreator(10)\r\n\r\n\r\nconst AddNewMyPostForm: React.FC<InjectedFormProps<PostFormDataType>> =(props)=>{\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name=\"newPostText\"\r\n                       placeholder=\"Enter your text\"\r\n                       validate={[requiredField,maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button >Add post</button>\r\n            </div>\r\n        </form>)\r\n}\r\nexport const AddNewPostReduxForm = reduxForm<PostFormDataType>({form: 'post'})(AddNewMyPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post1 from \"./Post/Post1\";\r\nimport {PostType} from \"../../../Redux/profile-reducer\";\r\nimport {AddNewPostReduxForm, PostFormDataType} from './Post/AddNewPostReduxForm'\r\nimport {logoutTC} from \"../../../Redux/auth-reducer\";\r\n// import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\n// import {maxLengthCreator, requiredField} from \"../../../validators/validators\";\r\n// import {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n//\r\n//\r\n// type PostFormDataType = {\r\n//     newPostText: string\r\n// }\r\n//\r\n//\r\n// const maxLength10=maxLengthCreator(10)\r\n//\r\n//\r\n// const AddNewMyPostForm: React.FC<InjectedFormProps<PostFormDataType>> =(props)=>{\r\n//     return (\r\n//         <form onSubmit={props.handleSubmit}>\r\n//             <div>\r\n//                 <Field component={Textarea}\r\n//                        name=\"newPostText\"\r\n//                        placeholder=\"Enter your text\"\r\n//                        validate={[requiredField,maxLength10]} />\r\n//             </div>\r\n//             <div>\r\n//                 <button >Add post</button>\r\n//             </div>\r\n//         </form>)\r\n// }\r\n// export const AddNewPostReduxForm = reduxForm<PostFormDataType>({form: 'post'})(AddNewMyPostForm)\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostType>,\r\n    //newPostText: string\r\n\r\n    addPost:(text: string) => void,\r\n    /*  removePost:(id: number) => void,\r\n      updateNewPostText:(newText: string) => void*/\r\n}\r\n\r\n/*class MyPosts extends React.Component<MyPostsType> {\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<MyPostsType>, nextState: Readonly<{}>): boolean {\r\n        return nextProps !=this.props || nextState != this.state\r\n    }//что бы не перерисовывать без изменений*/ //1вариантн\r\n/*\r\nclass MyPosts extends React.PureComponent<MyPostsType> { //-делает автоматом первый вариант,  используется только в классовай компоненте\r\n*/\r\nconst MyPosts = React.memo((props: MyPostsType) => { //в стрелке, оборачиваем в мемо\r\nconsole.log (\"render\")\r\n    let postsElements = props.posts.map(p => <Post1\r\n        id={p.id}\r\n        key={p.id}\r\n        message={p.message}\r\n        likesCount={p.likesCount}\r\n    />)\r\n\r\n    let onAddPotsClick = (values: PostFormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n\r\n    return <div className={s.postBlock}>\r\n        <h3>My posts</h3>\r\n        <AddNewPostReduxForm onSubmit={onAddPotsClick}/>\r\n        <div className={s.posts}>\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n\r\n});\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/Redux-store\";\r\nimport { addPostAC} from \"../../../Redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet mapStateToProps = (state: AppStateType) =>({\r\n        ...state.profilePage\r\n})\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n        return {\r\n                addPost : (text:string) => {\r\n                        dispatch(addPostAC(text))\r\n                }\r\n        }\r\n}\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./My-posts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../Redux/profile-reducer\";\r\n\r\nexport type ProfileProps={\r\n    profile:ProfileType | null\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\nconst Profile = (props:ProfileProps) => {\r\n\r\n    return <div>\r\n        <ProfileInfo profile={ props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../Redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MSTP = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorisedUserId : any\r\n    isAuth: boolean\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MDPT = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\ntype OwnPropsType = MSTP & MDPT\r\n\r\ntype ProfileDetailParams = RouteComponentProps<PathParamsType>\r\ntype ProfileContainerPropsType = ProfileDetailParams & OwnPropsType\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, AppStateType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            // '15350'\r\n            userId = this.props.authorisedUserId;\r\n            if(!userId) {\r\n                this.props.history.push('login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);//отправляем запрос на юзерский профайл\r\n\r\n        this.props.getStatus(Number(userId))\r\n    }\r\n\r\n    render() {\r\n\r\n        return <div>\r\n            <Profile profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n            />\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>\r\n(connect<MSTP, MDPT,{},AppStateType>(mapStateToProps, {getUserProfile,getStatus, updateStatus}),\r\n    withRouter,\r\n    WithAuthRedirect)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}