{"version":3,"sources":["Components/common/tenor/tenor.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/My-posts/Post/Post1.module.css","Components/Navbar/Navbar.module.css","reportWebVitals.jsx","Components/Navbar/Navbar.tsx","Components/News/News.tsx","Components/Music/Music.tsx","Components/Setting/Setting.tsx","API/api.ts","validators/objects-helper.tsx","Redux/users-reducer.tsx","Components/common/Paginator/Paginator.tsx","assets/img/user.png.jpg","Components/Users/Userrrr.tsx","Components/Users/Users.tsx","assets/img/tenor.gif","Components/common/tenor/tenor.tsx","Components/Users/users-selectors.tsx","Components/Users/UsersContainer.tsx","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/My-posts/Post/Post1.tsx","validators/validators.tsx","Components/common/FormsControls/FormsControls.tsx","Components/Profile/My-posts/Post/AddNewPostReduxForm.tsx","Components/Profile/My-posts/MyPosts.tsx","Redux/profile-reducer.tsx","Components/Profile/My-posts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","hoc/withAuthRedirect.tsx","Components/Profile/ProfileContainer.tsx","Components/Header/Header.tsx","Redux/auth-reducer.tsx","Components/Header/HeaderContainer.tsx","Components/login/Login.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/AddMessageFormRedux/AddMessageFormRedux.tsx","Components/Dialogs/Dialogs.tsx","Redux/dialogs-reducer.tsx","Components/Dialogs/DialogsContainer.tsx","Redux/sidebar-reducer.tsx","Redux/app-reducer.tsx","Redux/Redux-store.tsx","App.tsx","index.tsx","Components/Dialogs/Dialogs.module.css","Components/common/FormsControls/FormsControls.module.css","Components/Users/users.module.css","Components/common/Paginator/Paginator.module.css","Components/Profile/My-posts/MyPosts.module.css","Components/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","News","props","Music","Setting","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","response","data","userId","console","warn","profileAPI","getUserProfile","delete","post","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","updateObjectInArray","items","itemId","objPropertyName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_PROGRESS","followSuccess","type","unfollowSuccess","setCurrentPage","toggleIsFetching","isFetching","toggleFollowingProgress","initialState","users","totalUsersCount","followingInProgress","portionSize","usersReducer","state","action","followed","totalCount","filter","id","Paginator","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","selectedPage","onPageChanged","User","userContainer","photo","user","src","photos","small","userPhoto","alt","btnWrap","disabled","some","btnMode","unFollow","follow","userDescription","name","Users","Tenor","content","tenor","getUsers","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","this","React","Component","compose","connect","dispatch","a","resultCode","page","ProfileStatusWithHooks","editMode","setEditMode","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","onChange","e","currentTarget","value","ProfileInfo","profile","descriptionBlock","large","Post1","message","likesCount","requiredField","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","element","style","formControl","Textarea","restProps","child","Input","maxLength10","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","validate","MyPosts","memo","log","postsElements","posts","postBlock","values","addPost","newPostText","updateSetStatus","newStatus","profileReducer","newBodyPost","MyPostsContainer","profilePage","text","Profile","mapStateToPropsForRedirect","isAuth","auth","WithAuthRedirect","RedirectComponent","ProfileContainer","match","params","authorisedUserId","history","Number","withRouter","Header","header","loginBlock","login","logoutTC","SET_USER_DATA","setUserDataAC","getAuthUserDataTC","HeaderContainer","LoginReduxForm","formSummaryError","LoginTC","messages","stopSubmit","_error","DialogItem","path","dialog","Message","massage","maxLength50","AddMessageFormRedux","Dialogs","dialogsElements","dialogs","d","messageElements","m","dialogsItem","massages","formData","addMessageAC","newMessageBody","dialogsReducer","body","dialogsPage","sidebarReducer","InitialState","initialized","reducers","combineReducers","sidebar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleWare","App","initializedApp","render","DialogsContainer","CircularProgress","disableShrink","size","AppContainer","promise","Promise","all","SamuraiJSApp","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e1773553.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"tenor_content__aFHiD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1pv1B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post1_item__f7ha7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__32qPF\",\"item\":\"Navbar_item__3Qt17\",\"activeLink\":\"Navbar_activeLink__2ovIU\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n//let s = {\r\n //   'nav': 'Navbar_nav__17mde',\r\n//    'item': 'Navbar_item__11GBQ'\r\n//    'active': 'Navbar_active__6565cBQ'\r\n// let classNew = `${s.item} ${s.active}`;\r\n// }\r\n\r\nconst Navbar = () => {\r\n    return < nav className={s.nav} >\r\n    <div className= {s.item}>\r\n       <NavLink to=\"/profile\" activeClassName={s.activeLink}> Profile </NavLink>\r\n    </div>\r\n    <div className={`${s.item} ${s.active}`}>\r\n        <NavLink to=\"/dialogs\" activeClassName={s.activeLink}> Messages </NavLink>\r\n    </div>\r\n    <div className={s.item}>\r\n        <NavLink to=\"/news\" activeClassName={s.activeLink}> News </NavLink>\r\n    </div>\r\n    <div className={s.item}>\r\n        <NavLink to=\"/music\" activeClassName={s.activeLink}> Music </NavLink>\r\n    </div>\r\n    <div className={s.item}>\r\n        <NavLink to=\"/setting\" activeClassName={s.activeLink}> Settings </NavLink>\r\n    </div>\r\n        <div className={s.item}>\r\n        <NavLink to=\"/users\" activeClassName={s.activeLink}> Users </NavLink>\r\n    </div>\r\n        <div className={s.item}>\r\n        <NavLink to=\"/login\" activeClassName={s.activeLink}> Login </NavLink>\r\n    </div>\r\n    </nav>\r\n}\r\nexport default Navbar;","import React from \"react\";\r\nimport s from './News.module.css';\r\ntype NewsType={\r\n\r\n}\r\nconst News = (props:NewsType) => {\r\n    return (\r\n        <div>\r\n           News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport s from './Music.module.css';\r\ntype MusicType={\r\n\r\n}\r\nconst Music = (props:MusicType) => {\r\n    return (\r\n        <div>\r\n           Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from \"react\";\r\nimport s from './Setting.module.css';\r\ntype SettingType={\r\n\r\n}\r\nconst Setting = (props:SettingType) => {\r\n    return (\r\n        <div>\r\n            Setting\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting;","import axios from \"axios\";\r\n\r\n\r\n//отдельный экземпляр axios\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: { //передаем ключ\r\n        \"API-KEY\": \"1b870066-a689-4dee-839d-63ffa07d2f22\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`,)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n\r\n    },\r\n    getUserProfile(userId: string) {\r\n        console.warn('Obsolete method.Please profileAPI object');\r\n        return profileAPI.getUserProfile(userId);\r\n    },\r\n\r\n    deleteUnfollow(userId: number) {\r\n        return instance.delete('follow/' + userId)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    postFollow(userId: number) {\r\n        return instance.post('follow/' + userId)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    getUserProfile(userId = '15350') {\r\n        return instance.get(`profile/` + userId)\r\n            .then(response =>\r\n                 response.data)\r\n    },\r\n\r\n    getStatus(userId:number){\r\n        return instance.get(`profile/status/` + userId)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(status:string){\r\n        return instance.put(`profile/status` , {status: status})\r\n            .then(response => response.data)\r\n    }\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n      return instance.get(`auth/me`)\r\n    },\r\n    login(email:string, password: string, rememberMe:boolean = false) {\r\n      return instance.post(`auth/login`, { email, password, rememberMe })\r\n    },\r\n    logout() {\r\n      return instance.delete(`auth/login`)\r\n    },\r\n\r\n}","\r\n\r\nexport const updateObjectInArray = (items: Array<any>, itemId: any, objPropertyName: any, newObjProps: any) => {\r\n   return  items.map(u => {\r\n            if (u[objPropertyName] === itemId) {\r\n                return {...u, ...newObjProps}\r\n            }\r\n            return u\r\n        }\r\n    )\r\n}","import {usersAPI} from \"../API/api\";\r\nimport {Dispatch} from \"react\";\r\nimport {updateObjectInArray} from \"../validators/objects-helper\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET-USERS\";\r\nconst SET_CURRENT_PAGE = \"SET-CURRENT-PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET-TOTAL-USERS-COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\";\r\nconst TOGGLE_FOLLOWING_PROGRESS = \"TOGGLE-FOLLOWING-PROGRESS\";\r\n\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users:updateObjectInArray(state.users, action.userId, \"id\",\r\n                    {followed: true})\r\n\r\n                /*users: state.users.map((u) => {\r\n                        if (u.id === action.userId) {\r\n                            return {...u, followed: true}\r\n                        }\r\n                        return u\r\n                    } )*/\r\n\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users:updateObjectInArray(state.users, action.userId, \"id\",\r\n                    {followed: false})\r\n\r\n                /* users: state.users.map((u) => {\r\n                         if (u.id === action.userId) {\r\n                             return {...u, followed: false}\r\n                         }\r\n                         return u\r\n                     }\r\n                 )*/\r\n            }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state, users: action.users\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state, totalUsersCount: action.totalCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state, followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// ACTIONS CREATORS\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UsersType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage: currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalCount: totalUsersCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_FOLLOWING_PROGRESS, isFetching,\r\n    userId\r\n} as const)\r\n\r\n\r\n\r\n\r\n//ThunkCreator\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: DispatchType) => {\r\n\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\nconst followUnfollowFlow = (dispatch:DispatchType, userId: number, apiMethod:any, actionCreator:any) => {\r\n    return async (dispatch: DispatchType) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        //хотим отписаться и делаем post-запрос на сервер\r\n        let data = await apiMethod(userId)\r\n        if (data.resultCode == 0) {\r\n            dispatch(actionCreator(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: DispatchType) => {\r\n        // let apiMethod = usersAPI.postFollow.bind(usersAPI)\r\n        // let actionCreator = followSuccess\r\n        // followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n\r\n        const result = await usersAPI.postFollow(userId);\r\n        if (result.resultCode === 0) {\r\n            dispatch(followSuccess(userId))\r\n        }\r\n\r\n        // followUnfollowFlow(dispatch, userId, usersAPI.postFollow.bind(usersAPI),followSuccess)\r\n\r\n        // dispatch(toggleFollowingProgress(true, userId))\r\n        // //хотим подписаться и делаем post-запрос на сервер\r\n        // let data = await apiMethod(userId)\r\n        // if (data.resultCode == 0) {\r\n        //     dispatch(actionCreator(userId))\r\n        // }\r\n        // dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId: number) => {\r\n\r\n    return async (dispatch: DispatchType) => {\r\n        // let apiMethod = usersAPI.deleteUnfollow.bind(usersAPI)\r\n        // let actionCreator = unfollowSuccess\r\n        // followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n        // //followUnfollowFlow(dispatch, userId, usersAPI.deleteUnfollow.bind(usersAPI),unfollowSuccess)\r\n\r\n        const res = await usersAPI.deleteUnfollow(userId);\r\n        if(res.resultCode === 0) {\r\n            dispatch(unfollowSuccess(userId))\r\n        }\r\n\r\n\r\n        // dispatch(toggleFollowingProgress(true, userId))\r\n        // //хотим отписаться и делаем post-запрос на сервер\r\n        // let data = await apiMethod(userId)\r\n        // if (data.resultCode == 0) {\r\n        //     dispatch(actionCreator(userId))\r\n        // }\r\n        // dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype ActionsType =\r\n    | ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\ntype DispatchType = Dispatch<ActionsType>\r\n\r\nexport type UsersType =\r\n    {\r\n        name: string,\r\n        id: number,\r\n        uniqueUrlName: null,\r\n        photos: {\r\n            small: string | undefined,\r\n            large: string | undefined\r\n        },\r\n        status: null,\r\n        followed: boolean,\r\n\r\n    }\r\n\r\n\r\nexport let initialState: UsersStateType = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,//текущая страница\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n    portionSize: 10\r\n}\r\nexport type UsersStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    portionSize: number\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport default usersReducer;\r\n\r\n\r\n\r\n","import styles from \"./Paginator.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport style from \"./Paginator.module.css\";\r\n\r\n\r\nexport type PaginatorPropsType = {\r\n    currentPage: number;\r\n    pageSize: number;\r\n    totalItemsCount: number;\r\n    onPageChanged: (p: number) => void;\r\n    portionSize: number;\r\n}\r\n\r\n\r\nconst Paginator = (props: PaginatorPropsType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize) //округляем в большую сторону\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pagesCount/props.portionSize)\r\n    let [portionNumber,setPortionNumber] = useState<number>(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * props.portionSize\r\n\r\n\r\n    return <div className={styles.paginator}>\r\n\r\n\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p<= rightPortionPageNumber)\r\n            .map(p => {\r\n                return <span\r\n                    className={props.currentPage === p ? styles.selectedPage : ''}\r\n                    key={p}\r\n                    onClick={() => {\r\n                        props.onPageChanged(p)\r\n                    }}> {`${p} `}</span>\r\n            })}\r\n\r\n        { portionCount > portionNumber &&\r\n        <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n\r\n    </div>\r\n}\r\nexport default Paginator;\r\n\r\n\r\n// function Paginator(props: PaginatorPropsType) {\r\n//     let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n//     let pages = [];\r\n//\r\n//     for (let i = 1; i <= pagesCount; i++) {\r\n//         pages.push(i)\r\n//     }\r\n//\r\n//     let portionCount = Math.ceil(pagesCount / props.portionSize)\r\n//     let [portionNumber, setPortionNumber] = useState<number>(1)\r\n//     let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1\r\n//     let rightPortionPageNumber = portionNumber * props.portionSize\r\n//\r\n//\r\n//     const buttonPrev = portionNumber > 1 &&\r\n//         <Button onClick={() => {\r\n//             setPortionNumber(portionNumber - 1)\r\n//         }} name={'PREV'}/>\r\n//\r\n//     const buttonNext = portionCount > portionNumber &&\r\n//         <Button onClick={() => {\r\n//             setPortionNumber(portionNumber + 1)\r\n//         }} name={'NEXT'}/>\r\n//\r\n//     const paginatorNumbers = pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n//         .map(p => {\r\n//             return <span\r\n//                 className={props.currentPage === p ? style.selectedPage : style.paginatorNumber}\r\n//                 key={p}\r\n//                 onClick={() => {\r\n//                     props.onPageChanged(p)\r\n//                 }}>\r\n//                             {`${p} `}\r\n//                         </span>\r\n//         })\r\n//\r\n//     return (\r\n//         <div className={style.paginator}>\r\n//             {buttonPrev}\r\n//             {paginatorNumbers}\r\n//             {buttonNext}\r\n//         </div>\r\n//     );\r\n// }\r\n// export default Paginator;","export default __webpack_public_path__ + \"static/media/user.png.0fb29545.jpg\";","import styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/img/user.png.jpg\";\r\nimport React from \"react\";\r\nimport {UsersType} from \"../../Redux/users-reducer\";\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\ntype UserPropsType = {\r\n    user: UsersType;\r\n    followingInProgress: Array<number>;\r\n    follow: (userID: number) => void;\r\n    unFollow: (userID: number) => void;\r\n}\r\n\r\n\r\nconst User = (props: UserPropsType) => {\r\n\r\n    // let user = user;\r\n    return <div className={styles.userContainer}>\r\n            <span>\r\n                <div className={styles.photo}>\r\n                    <NavLink to={'/profile/' + props.user.id}>\r\n                    <img src={props.user.photos.small != null ? props.user.photos.small : userPhoto} alt=\"\"/>\r\n                    </NavLink>\r\n                </div>\r\n\r\n                 <div className={styles.btnWrap}>\r\n                    {\r\n                        props.user.followed ?\r\n                            <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                    className={styles.btnMode}\r\n                                    onClick={() => {\r\n                                        props.unFollow(props.user.id)\r\n                                    }}> Unfollow</button>\r\n\r\n                            : <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                      className={styles.btnMode}\r\n                                      onClick={() => {\r\n                                          props.follow(props.user.id)\r\n                                      }}> Follow</button>\r\n                    }\r\n\r\n                </div>\r\n            </span>\r\n        <span>\r\n                    <div className={styles.userDescription}>\r\n                        <h5>{props.user.name}</h5>\r\n                        <p>{props.user.status}</p>\r\n                    </div>\r\n                    <span>\r\n                        <div>{\"user.location.country\"}</div>\r\n                        <div>{\"user.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n    </div>\r\n}\r\nexport default User;\r\n","import styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/img/user.png.jpg\";\r\nimport React from \"react\";\r\nimport {UsersType} from \"../../Redux/users-reducer\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./Userrrr\";\r\n\r\n\r\ntype UsersPropsType = {\r\n    portionSize: number;\r\n    followingInProgress: Array<number>;\r\n    users: Array<UsersType>;\r\n    currentPage: number;\r\n    pageSize: number;\r\n    totalUsersCount: number;\r\n    follow: (userID: number) => void;\r\n    unFollow: (userID: number) => void;\r\n    onPageChanged: (p: number) => void;\r\n}\r\n\r\n\r\nlet Users = (props: UsersPropsType) => {\r\n\r\n    return <div>\r\n        <Paginator currentPage={props.currentPage}\r\n                   pageSize={props.pageSize}\r\n                   totalItemsCount={props.totalUsersCount}\r\n                   onPageChanged={props.onPageChanged}\r\n                   portionSize={props.portionSize}/>\r\n        {\r\n            props.users.map((u) =>\r\n                <User key={u.id}\r\n                      user={u}\r\n                      followingInProgress={props.followingInProgress}\r\n                      unFollow={props.unFollow}\r\n                      follow={props.follow}/>)}\r\n    </div>\r\n}\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/tenor.66e2f987.gif\";","import tenor from \"../../../assets/img/tenor.gif\";\r\nimport React from \"react\";\r\nimport s from \"./tenor.module.css\"\r\n\r\n\r\nlet Tenor = () => {\r\n    return <div className={s.content}>\r\n         <img src={tenor}/>\r\n            </div>\r\n}\r\nexport default Tenor","import {AppStateType} from \"../../Redux/Redux-store\";\r\nimport {createSelector} from \"reselect\";\r\nimport {UsersType} from \"../../Redux/users-reducer\";\r\n/*\r\nexport const  getUsers = (state: AppStateType) =>{\r\n    return state.usersPage.users\r\n}\r\n*/\r\nconst  getUserSelector = (state: AppStateType) =>{\r\n    return state.usersPage.users\r\n}\r\n\r\nexport  const  getUsers = createSelector\r\n(getUserSelector, (users:Array<UsersType>)=>{\r\n    return users.filter((u) => true)\r\n})\r\n\r\nexport const  getPageSize = (state: AppStateType) =>{\r\n    return state.usersPage.pageSize\r\n}\r\nexport const  getTotalUsersCount = (state: AppStateType) =>{\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const  getCurrentPage = (state: AppStateType) =>{\r\n    return state.usersPage.currentPage\r\n}\r\nexport const  getIsFetching = (state: AppStateType) =>{\r\n    return state.usersPage.isFetching\r\n}\r\nexport const  getFollowingInProgress = (state: AppStateType) =>{\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n/*\r\n\r\nusers: state.usersPage.users,\r\n    pageSize: state.usersPage.pageSize,\r\n    totalUsersCount: state.usersPage.totalUsersCount,\r\n    currentPage: state.usersPage.currentPage,\r\n    isFetching: state.usersPage.isFetching,\r\n    followingInProgress: state.usersPage.followingInProgress*/\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport {\r\n    setCurrentPage, toggleFollowingProgress,\r\n    UsersType, follow, unFollow, requestUsers\r\n} from \"../../Redux/users-reducer\";\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport Users from \"./Users\";\r\nimport Tenor from \"../common/tenor/tenor\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"./users-selectors\";\r\n\r\n\r\nexport type UsersPropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    portionSize: number\r\n    followingInProgress: Array<number>\r\n    setCurrentPage: (currentPage: number) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    unFollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n\r\n}\r\n\r\n\r\nclass UsersContainer extends React.Component <UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        //this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n        const {currentPage, pageSize} = this.props\r\n        this.props.getUsers(currentPage, pageSize)\r\n    }\r\n\r\n    onPageChanged = (currentPage: number) => {\r\n        const {pageSize} = this.props\r\n        this.props.getUsers(currentPage, pageSize)\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return <>\r\n            {this.props.isFetching ? <Tenor/> : null}\r\n            <Users currentPage={this.props.currentPage}\r\n                   onPageChanged={this.onPageChanged}\r\n                   pageSize={this.props.pageSize}\r\n                   totalUsersCount={this.props.totalUsersCount}\r\n                   users={this.props.users}\r\n                   follow={this.props.follow}\r\n                   unFollow={this.props.unFollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   portionSize={this.props.portionSize}/>\r\n        </>\r\n\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state),\r\n        portionSize: state.usersPage.portionSize\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    //WithAuthRedirect,\r\n    (connect(mapStateToProps, {toggleFollowingProgress, setCurrentPage, follow, unFollow, getUsers: requestUsers})\r\n\r\n    ))(UsersContainer)\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\nexport type ProfileStatusWithHooksPropsType = {\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props:ProfileStatusWithHooksPropsType) =>\r\n\r\n{\r\n    /*let stateWithSetState =useState(false)\r\n    let editMode = stateWithSetState[0]\r\n    let setEditMode = stateWithSetState [1]*/\r\nlet [editMode, setEditMode] = useState(false)\r\nlet [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n\r\n    const activateEditMode=()=>{\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n       setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n\r\n   const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n\r\n        return <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"No status\"} </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input type=\"text\"\r\n                       autoFocus={true}\r\n                       onBlur={deactivateEditMode}\r\n                       onChange={onStatusChange}\r\n                       value={status}\r\n                       />\r\n            </div>\r\n            }\r\n        </div>\r\n\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Tenor from \"../../common/tenor/tenor\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: any\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\nconst ProfileInfo = (props:ProfileInfoPropsType) => {\r\n    if (!props.profile){\r\n        return <Tenor/>\r\n    }\r\n    return <div >\r\n        <div className={s.descriptionBlock}>\r\n            <img src={props.profile.photos.large}/>\r\n            <ProfileStatusWithHooks  status={props.status} updateStatus={props.updateStatus}/>\r\n        </div>\r\n    </div>\r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post1.module.css';\r\n\r\ntype Post1PropsType ={\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n\r\n\r\n}\r\n\r\nconst Post1 = (props: Post1PropsType) => {\r\n\r\n\r\n    return <div className={s.item}>\r\n\r\n        <img src=\"https://cdn1.iconfinder.com/data/icons/ios-web-user-interface-hand-drawn-vol-1/512/338Big_emoji_face_happy_smile_smiley-512.png\" alt =\"\"/>\r\n        {props.message}\r\n\r\n        <div>\r\n           <span>Like</span> {props.likesCount}\r\n        </div>\r\n\r\n        <div>\r\n            {/*<button onClick={props.removePost(props.id)}>delete post</button>*/}\r\n            <button >delete post</button>\r\n            <button >{props.id}</button>\r\n        </div>\r\n\r\n    </div>\r\n}\r\nexport default Post1;","import React from 'react';\r\n\r\nexport const requiredField = (value:any) => {\r\n    if (value)return undefined\r\n    return 'Field is required';\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const maxLengthCreator= (maxLength:any) => (value:any) => {\r\n    if (value && value.length > maxLength)return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n\r\n}\r\n/*export const maxLength30 = (value:any) => {\r\n    if (value && value.length > 30)return \"Max length is 30 symbols\"\r\n    return undefined;\r\n\r\n}*/\r\n\r\n\r\n","import React from 'react';\r\nimport style from './FormsControls.module.css';\r\nimport {Field} from \"redux-form\";\r\nimport {requiredField} from \"../../../validators/validators\";\r\n\r\n\r\ntype TextareaPropsType = HTMLFormElement & { placeholder: string }\r\n\r\n\r\n/*\r\n\r\nexport const Textarea = (props:any) => {\r\n    const {input,meta,child,...restProps} = props\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={style.formControl  + \" \" + (hasError ? style.error: \"\")}>\r\n            <div>\r\n                <textarea {...props.input} {...props}/>\r\n            </div>\r\n            {hasError &&<span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = (props:any) => {\r\n    const {input,meta,child,...restProps} = props\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={style.formControl  + \" \" + (hasError ? style.error: \"\")}>\r\n            <div>\r\n                <textarea {...props.input} {...props}/>\r\n            </div>\r\n            {hasError &&<span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}*/\r\nconst FormControl = ({input, meta:{touched, error}, children, element}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span className={style.error}>{error}</span>}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}></input></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: any, name: any, validators: any, component: any, props:any ={}, text:string = \"\") =>\r\n    <div> <Field placeholder={placeholder}\r\n                 name={name} component={validators}\r\n                 validate={component} {...props}/>{text}</div>","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, requiredField} from \"../../../../validators/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\n\r\nexport type PostFormDataType = {\r\n    newPostText: string\r\n}\r\n\r\n\r\nconst maxLength10=maxLengthCreator(10)\r\n\r\n\r\nconst AddNewMyPostForm: React.FC<InjectedFormProps<PostFormDataType>> =(props)=>{\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name=\"newPostText\"\r\n                       placeholder=\"Enter your text\"\r\n                       validate={[requiredField,maxLength10]} />\r\n            </div>\r\n            <div>\r\n                <button >Add post</button>\r\n            </div>\r\n        </form>)\r\n}\r\nexport const AddNewPostReduxForm = reduxForm<PostFormDataType>({form: 'post'})(AddNewMyPostForm)","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post1 from \"./Post/Post1\";\r\nimport {PostType} from \"../../../Redux/profile-reducer\";\r\nimport {AddNewPostReduxForm, PostFormDataType} from './Post/AddNewPostReduxForm'\r\nimport {logoutTC} from \"../../../Redux/auth-reducer\";\r\n// import {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\n// import {maxLengthCreator, requiredField} from \"../../../validators/validators\";\r\n// import {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n//\r\n//\r\n// type PostFormDataType = {\r\n//     newPostText: string\r\n// }\r\n//\r\n//\r\n// const maxLength10=maxLengthCreator(10)\r\n//\r\n//\r\n// const AddNewMyPostForm: React.FC<InjectedFormProps<PostFormDataType>> =(props)=>{\r\n//     return (\r\n//         <form onSubmit={props.handleSubmit}>\r\n//             <div>\r\n//                 <Field component={Textarea}\r\n//                        name=\"newPostText\"\r\n//                        placeholder=\"Enter your text\"\r\n//                        validate={[requiredField,maxLength10]} />\r\n//             </div>\r\n//             <div>\r\n//                 <button >Add post</button>\r\n//             </div>\r\n//         </form>)\r\n// }\r\n// export const AddNewPostReduxForm = reduxForm<PostFormDataType>({form: 'post'})(AddNewMyPostForm)\r\n\r\ntype MyPostsType = {\r\n    posts: Array<PostType>,\r\n    //newPostText: string\r\n\r\n    addPost:(text: string) => void,\r\n    /*  removePost:(id: number) => void,\r\n      updateNewPostText:(newText: string) => void*/\r\n}\r\n\r\n/*class MyPosts extends React.Component<MyPostsType> {\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<MyPostsType>, nextState: Readonly<{}>): boolean {\r\n        return nextProps !=this.props || nextState != this.state\r\n    }//что бы не перерисовывать без изменений*/ //1вариантн\r\n/*\r\nclass MyPosts extends React.PureComponent<MyPostsType> { //-делает автоматом первый вариант,  используется только в классовай компоненте\r\n*/\r\nconst MyPosts = React.memo((props: MyPostsType) => { //в стрелке, оборачиваем в мемо\r\nconsole.log (\"render\")\r\n    let postsElements = props.posts.map(p => <Post1\r\n        id={p.id}\r\n        key={p.id}\r\n        message={p.message}\r\n        likesCount={p.likesCount}\r\n    />)\r\n\r\n    let onAddPotsClick = (values: PostFormDataType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n\r\n    return <div className={s.postBlock}>\r\n        <h3>My posts</h3>\r\n        <AddNewPostReduxForm onSubmit={onAddPotsClick}/>\r\n        <div className={s.posts}>\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n\r\n});\r\n\r\n\r\nexport default MyPosts;","import {profileAPI, usersAPI} from \"../API/api\";\r\nimport {Dispatch} from \"react\";\r\n\r\n\r\n/*const ADD-POST = 'profile/ADD-POST'\r\nconst SET-USER-PROFILE = 'profile/SET-USER-PROFILE'\r\nconst SET-STATUS = 'profile/SET-STATUS'\r\nconst UPDATE-STATUS = 'profile/UPDATE-STATUS'*/\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 156},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 20},\r\n        {id: 3, message: 'BlaBla', likesCount: 10},\r\n        {id: 4, message: 'I am happy!', likesCount: 90},\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\nconst profileReducer = (state: ProfilePageType = initialState, action: AllActionsType): ProfilePageType => {\r\n\r\n\r\n    switch (action.type) {\r\n\r\n        case \"ADD-POST\":\r\n            let stateCopy = {...state};\r\n            let addPost = {\r\n                id: state.posts[state.posts.length - 1].id + 1,\r\n                message: action.newBodyPost,\r\n                likesCount: 0\r\n            }\r\n            stateCopy = {\r\n                ...state,\r\n                posts: [...state.posts, addPost],   // копируем посты + пушим новый\r\n               /* newPostText: \"\"     */                // затираем ввод ввод после пуша\r\n            }\r\n            return stateCopy;\r\n\r\n       /* case \"UPDATE-NEW-POST-TEXT\": {\r\n            return {...state, newPostText: action.newText}\r\n        }*/\r\n\r\n        case \"REMOVE-POST\": {\r\n            return {...state, posts: {...state.posts}}\r\n            //return {...state, posts: {...state.posts.filter(p => p.id !=action.id)}}\r\n            //stateCopy.posts.filter(p => p.id !== action.id)\r\n\r\n            //return stateCopy\r\n        }\r\n\r\n        case \"SET-USER-PROFILE\": {\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        }\r\n        case \"SET-STATUS\": {\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        }\r\n        case \"UPDATE-STATUS\": {\r\n            return {\r\n                ...state, status: action.newStatus\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// ACTIONS CREATORS\r\nexport const addPostAC = (newBodyPost:string): addPostActionType => ({type: \"ADD-POST\", newBodyPost});\r\nexport const removePost = (id: number): removePostActionType => ({type: \"REMOVE-POST\", id});\r\n/*export const updateNewPostText = (newText: string): updateNewPostTextActionType => ({\r\n    type: \"UPDATE-NEW-POST-TEXT\",\r\n    newText\r\n});*/\r\nexport const setUserProfile = (profile: ProfileType): setUserProfile => ({type: 'SET-USER-PROFILE', profile});\r\nexport const setStatus = (status: string) => ({type: 'SET-STATUS', status});\r\nexport const updateSetStatus = (newStatus: string) => ({type: 'UPDATE-STATUS', newStatus});\r\n\r\nexport type ProfileActionType =\r\n    | ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof removePost>/*\r\n    | ReturnType<typeof updateNewPostText>*/\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof updateSetStatus>\r\n\r\ntype DispatchGetUserProfile = Dispatch<ProfileActionType>\r\n\r\n// THUNK CREATORS\r\nexport const getUserProfile = (userId: string) => {\r\n    return async (dispatch: DispatchGetUserProfile) => {\r\n        let response = await usersAPI.getUserProfile(userId)\r\n                dispatch(setUserProfile(response.data))\r\n    }\r\n};\r\n\r\nexport const getStatus =(userId: number) =>\r\n    async (dispatch: DispatchGetUserProfile) => {\r\n        let response = await profileAPI.getStatus(userId)\r\n                dispatch(setStatus(response.data))\r\n    };\r\n\r\n\r\nexport const updateStatus=(newStatus: string) =>\r\n    async (dispatch: Dispatch<ProfileActionType>) => {\r\n       let response= await profileAPI.updateStatus(newStatus)\r\n               if (response.resultCode === 0) {\r\n                    dispatch(updateSetStatus(newStatus))\r\n                }\r\n    };\r\n\r\n//types\r\n\r\nexport type ProfilePageType = {\r\n    posts: PostsType\r\n    /* newPostText: string*/\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\nexport type PostsType = Array<PostType>\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: Array<ContactsType>\r\n    lookingForAJob: true,\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number,\r\n    photos: Array<PhotosType>\r\n}\r\n\r\ntype ContactsType = {\r\n    facebook: string\r\n    website: null\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: null\r\n    github: string\r\n    mainLink: null\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\ntype addPostActionType = { type: 'ADD-POST', newBodyPost:string }\r\ntype removePostActionType = { type: 'REMOVE-POST', id: number }\r\ntype setUserProfile = { type: 'SET-USER-PROFILE', profile: ProfileType }\r\ntype setStatus = { type: 'SET-STATUS', status: string }\r\ntype updateStatus = { type: 'UPDATE-STATUS', newStatus: string }\r\n\r\ntype AllActionsType = addPostActionType\r\n    | removePostActionType\r\n    | setUserProfile\r\n    | setStatus\r\n    | updateStatus\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../Redux/Redux-store\";\r\nimport { addPostAC} from \"../../../Redux/profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet mapStateToProps = (state: AppStateType) =>({\r\n        ...state.profilePage\r\n})\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n        return {\r\n                addPost : (text:string) => {\r\n                        dispatch(addPostAC(text))\r\n                }\r\n        }\r\n}\r\nlet MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./My-posts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../Redux/profile-reducer\";\r\n\r\nexport type ProfileProps={\r\n    profile:ProfileType | null\r\n    status: string\r\n    updateStatus: (newStatus: string) => void\r\n}\r\nconst Profile = (props:ProfileProps) => {\r\n\r\n    return <div>\r\n        <ProfileInfo profile={ props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}/>\r\n        <MyPostsContainer/>\r\n    </div>\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport {Redirect} from \"react-router\";\r\nimport {AppStateType} from \"../Redux/Redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n\r\n        render() {\r\n\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../Redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype MSTP = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorisedUserId : any\r\n    isAuth: boolean\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MDPT = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (newStatus: string) => void\r\n}\r\n\r\ntype OwnPropsType = MSTP & MDPT\r\n\r\ntype ProfileDetailParams = RouteComponentProps<PathParamsType>\r\ntype ProfileContainerPropsType = ProfileDetailParams & OwnPropsType\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, AppStateType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            // '15350'\r\n            userId = this.props.authorisedUserId;\r\n            if(!userId) {\r\n                this.props.history.push('login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);//отправляем запрос на юзерский профайл\r\n\r\n        this.props.getStatus(Number(userId))\r\n    }\r\n\r\n    render() {\r\n\r\n        return <div>\r\n            <Profile profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n            />\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorisedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>\r\n(connect<MSTP, MDPT,{},AppStateType>(mapStateToProps, {getUserProfile,getStatus, updateStatus}),\r\n    withRouter,\r\n    WithAuthRedirect)(ProfileContainer)\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css';\r\nimport {HeaderContainerPropsType, MSTP} from \"./HeaderContainer\";\r\n\r\nfunction Header(props: HeaderContainerPropsType) {\r\nconst onClickLogout = () => {\r\n    props.logoutTC()\r\n}\r\n    return <header className={s.header}>\r\n        <img\r\n            src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSnGRPBfeIhYDR8QlaRPIbcUbBbeYupsOsUcQ&usqp=CAU' alt =\"\"/>\r\n\r\n   <div className={s.loginBlock}>\r\n       {\r\n           props.auth.isAuth\r\n               ? <div>{props.auth.login} - <button onClick={onClickLogout}>logout</button></div>\r\n               : <NavLink to={'/login'}>Login</NavLink>\r\n       }\r\n   </div>\r\n    </ header>\r\n}\r\n\r\nexport default Header;","import {authAPI} from \"../API/api\";\r\nimport {Dispatch} from \"react\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"auth/SET_USER_DATA\";\r\n\r\n\r\nlet initialState: AuthStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\n\r\nexport const authReducer = (state: AuthStateType = initialState, action: AuthActionType): AuthStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                id: action.userId,\r\n                email: action.email,\r\n                login: action.login,\r\n                isAuth: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// ACTIONS CREATORS\r\n\r\nexport const setUserDataAC = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n    ({type: SET_USER_DATA, userId, email, login, isAuth} as const)\r\n\r\n\r\n//thunks\r\nexport const getAuthUserDataTC = () => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response.data.resultCode === 0) {\r\n            let {id, login, email} = response.data.data\r\n            dispatch(setUserDataAC(id, login, email, true))\r\n        }\r\n    }\r\n}\r\n\r\nexport const LoginTC = (email: string, password: string, rememberMe: boolean) => {\r\n    return async (dispatch: Dispatch<any>) => {\r\n\r\n        let response = await authAPI.login(email, password, rememberMe)\r\n\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserDataTC())\r\n        } else {\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n            dispatch(stopSubmit(\"login\", {_error: `${message}`}))\r\n        }\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n\r\n        let response = await authAPI.logout()\r\n\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n//types\r\nexport type AuthStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\nexport type AuthActionType = ReturnType<typeof setUserDataAC>\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport {AuthStateType, logoutTC} from \"../../Redux/auth-reducer\";\r\n\r\nexport type MDTP = {\r\n    logoutTC : () => void\r\n}\r\n\r\nexport type MSTP = {\r\n    auth: AuthStateType\r\n}\r\nexport type HeaderContainerPropsType = MDTP & MSTP\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props}/>;\r\n    }\r\n}\r\n\r\nexport const mapStateToProps = (state: AppStateType): MSTP => ({\r\n    auth: state.auth,\r\n})\r\nexport default connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps, {logoutTC})(HeaderContainer);","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form';\r\nimport {createField, Input, Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {requiredField} from \"../../validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {LoginTC} from \"../../Redux/auth-reducer\";\r\nimport {Redirect} from \"react-router\";\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ntype LoginPropsType = {\r\n    LoginTC: (email: string, password: string, rememberMe: boolean) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n           {/* {createField(\"Email\",\"email\", [requiredField],Input)}\r\n            {createField(\"Password\",\"password\", [requiredField],Input, {type: \" password\"})}\r\n            {createField(null,\"rememberMe\", null,Input, {type: \" checkbox\"}, \"remember me\")}*/}\r\n            <div>\r\n                <Field placeholder={\"Email\"} name={\"email\"} component={Input}\r\n                       validate={[requiredField]}/>\r\n            </div>\r\n            <div className={style.password}>\r\n                <Field placeholder={\"Password\"} name={\"password\"} component={Input}\r\n                       validate={[requiredField]} type={'password'}/>\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={\"input\"}\r\n                     /> remember me\r\n            </div>\r\n            {props.error && <div className={style.formSummaryError}>{props.error}</div>}\r\n            <div>\r\n                <button>Log in</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm);\r\n\r\n\r\nconst Login = (props:LoginPropsType) => {\r\n    const onSubmitT = (data: FormDataType) => {\r\n        props.LoginTC(data.email, data.password, data.rememberMe)\r\n    }\r\nif(props.isAuth) {\r\n    return <Redirect to={\"/profile\"}/>\r\n}\r\n\r\n    return (\r\n        <div>\r\n            <LoginReduxForm onSubmit={onSubmitT}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state:AppStateType)  => {\r\n    return {\r\n        isAuth : state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {LoginTC}) (Login)\r\n\r\n\r\n/*\r\n$('body').on('click', '.password-control', function(){\r\n    if ($('#password-input').attr('type') == 'password'){\r\n        $(this).addClass('view');\r\n        $('#password-input').attr('type', 'text');\r\n    } else {\r\n        $(this).removeClass('view');\r\n        $('#password-input').attr('type', 'password');\r\n    }\r\n    return false;\r\n});*/\r\n","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}> {props.name} </NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype messageType ={\r\n    message: string\r\n}\r\nconst Message = (props:messageType) => {\r\n    return <div className={s.massage}> {props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {maxLengthCreator, requiredField} from \"../../../validators/validators\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type MessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength50=maxLengthCreator(50)\r\nconst AddMessageForm: React.FC<InjectedFormProps<MessageFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newMessageBody\"\r\n                       placeholder=\"Enter your massage\"\r\n                       component={Textarea}\r\n                       validate={[requiredField,maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddMessageFormRedux = reduxForm<MessageFormDataType>({form: \"dialogAddMassageForm\"})(AddMessageForm)\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {addMessageAC, DialogType, MessageType} from \"../../Redux/dialogs-reducer\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../validators/validators\";\r\nimport {AddMessageFormRedux, MessageFormDataType} from \"./AddMessageFormRedux/AddMessageFormRedux\";\r\n\r\n\r\n\r\nexport type DialogsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    //textNewMessages: string\r\n    isAuth: boolean\r\n    addMessageAC: (text: string) => void\r\n    // newMessageBody: string\r\n    //updateMessage: (body: string) => void\r\n}\r\n\r\n\r\nconst Dialogs: React.FC<DialogsType> = (props) => {\r\n\r\n    // из массива объектов dialogsData, преобразуем/мапим в массив элементов\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n\r\n    let messageElements = props.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n    let addNewMessage = (formData: MessageFormDataType) => {\r\n        props.addMessageAC(formData.newMessageBody)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.massages}>\r\n                <div>{messageElements}</div>\r\n            </div>\r\n            <div><AddMessageFormRedux onSubmit={addNewMessage}/></div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","export type dialogsPageType = {\r\n    dialogs: DialogsType\r\n    messages: MessagesType\r\n}\r\nexport type DialogsType = Array<DialogType>\r\nexport type MessagesType = Array<MessageType>\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype addMessageActionType = { type: 'TEXT-NEW-MESSAGE', newMessageBody: string}\r\ntype AllActionsType = addMessageActionType\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Andrey'},\r\n        {id: 2, name: 'Fredy'},\r\n        {id: 3, name: 'Nika'},\r\n        {id: 4, name: 'Sonia'},\r\n        {id: 5, name: 'Ray'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: dialogsPageType = initialState, action: AllActionsType): dialogsPageType => {\r\n\r\n\r\n    switch (action.type) {\r\n\r\n        case \"TEXT-NEW-MESSAGE\":\r\n\r\n           /* let newMessage = {\r\n                id: 6,\r\n                message: action.newMessageBody\r\n            }\r\n            stateCopy = {...state,\r\n                messages: [...state.messages, newMessage],\r\n                textNewMessages: \"\"\r\n            }\r\n            return stateCopy;*/\r\n            let body = action.newMessageBody\r\n            return  {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const addMessageAC = (newMessageBody:string): addMessageActionType => ({type: \"TEXT-NEW-MESSAGE\",newMessageBody});\r\n\r\n\r\nexport default dialogsReducer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport {addMessageAC, DialogType, MessageType} from \"../../Redux/dialogs-reducer\";\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose, Dispatch} from \"redux\";\r\n\r\n\r\ntype MSTPType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n\r\n}\r\n\r\ntype MDTPType = {\r\n    addMessageAC: (text: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        isAuth: state.auth.isAuth,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MSTPType, MDTPType, {}, AppStateType>(mapStateToProps, {addMessageAC}),\r\n    WithAuthRedirect)(Dialogs); //суть , возьми Dialogs, закинь в WithAuthRedirect, потом что получилось в connect(mapStateToProps,mapDispatchToProps),\r\n\r\n\r\n","\r\nlet initialState = {}\r\nconst sidebarReducer = (state: any = initialState, action: any) => {\r\n\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer;","import { Dispatch } from \"redux\"\r\nimport {getAuthUserDataTC} from './auth-reducer';\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCSESS'\r\n\r\n\r\nlet InitialState: InitialStateType = {\r\n    initialized: false\r\n}\r\n\r\n\r\nexport const appReducer = (state= InitialState, action: ActionTypes)=> {\r\n\r\n\r\n    switch (action.type) {\r\n        case 'INITIALIZED_SUCCSESS':\r\n            return {...state, initialized: true}\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const initializedSuccess = () =>\r\n    ({type: INITIALIZED_SUCCESS} as const)\r\n\r\n//thunks\r\nexport const initializedAppTC = () => (dispatch: Dispatch<any>) => {\r\n    let promise = dispatch(getAuthUserDataTC())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\n//types\r\ntype ActionTypes = ReturnType<typeof initializedSuccess>\r\ntype InitialStateType = { initialized: boolean }\r\n","import {applyMiddleware, combineReducers, createStore, compose} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers( {\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers,  composeEnhancers(\r\n    applyMiddleware(thunkMiddleWare)\r\n));\r\n//export let store = createStore(reducers, applyMiddleware(thunkMiddleWare));//applyMiddleware-прими промежуточные слои\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>","import React from 'react';\nimport './App.css';\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\nimport News from \"./Components/News/News\";\nimport Music from \"./Components/Music/Music\";\nimport Setting from \"./Components/Setting/Setting\";\nimport UsersContainer from \"./Components/Users/UsersContainer\";\nimport ProfileContainer from \"./Components/Profile/ProfileContainer\";\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport Login from \"./Components/login/Login\";\nimport DialogsContainer from \"./Components/Dialogs/DialogsContainer\";\nimport {connect, Provider} from \"react-redux\";\nimport {AppStateType, store} from \"./Redux/Redux-store\";\nimport {compose} from \"redux\";\nimport {initializedAppTC} from \"./Redux/app-reducer\";\nimport {CircularProgress} from '@material-ui/core';\n\n\ntype MapDispatchToPropsType = {\n    initializedApp: () => void\n}\n\ntype MapStateToPropsType = {\n    initialized: boolean\n}\n\ntype AppPropsType = MapDispatchToPropsType & MapStateToPropsType\n\n\nclass App extends React.Component <AppPropsType, AppStateType> {\n    componentDidMount() {\n        this.props.initializedApp();\n\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <CircularProgress disableShrink\n                                     size={100}/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n\n                <div className='app-wrapper-content'>\n\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\n\n\n                    <Route path='/profile/:userId?' render={() =>\n                        <ProfileContainer/>}/>\n\n                    <Route path='/news' render={() => <News/>}/>\n                    <Route path='/music' render={() => <Music/>}/>\n                    <Route path='/setting' render={() => <Setting/>}/>\n\n\n                    <Route path='/users' render={() =>\n                        <UsersContainer/>}/>\n\n                    <Route path='/login' render={() =>\n                        <Login/>}/>\n\n\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {initialized: state.app.initialized}\n}\n\nconst AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializedApp: initializedAppTC}))\n(App)\n\n\nconst SamuraiJSApp = (props: any) => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n\n}\n\nexport default SamuraiJSApp\n\n","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport SamuraiJSApp from \"./App\";\n\n\nReactDOM.render(\n    <SamuraiJSApp/>\n    , document.getElementById('root'));\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3JopZ\",\"dialog\":\"Dialogs_dialog__2sWkh\",\"dialogsItem\":\"Dialogs_dialogsItem__2nKwx\",\"active\":\"Dialogs_active__r35ya\",\"massages\":\"Dialogs_massages__irC8F\",\"massage\":\"Dialogs_massage__2rizI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__wIBbp\",\"error\":\"FormsControls_error__fVdQ7\",\"formSummaryError\":\"FormsControls_formSummaryError__1lCuv\",\"password\":\"FormsControls_password__2Kl3v\",\"password-control\":\"FormsControls_password-control__2n0rD\",\"view\":\"FormsControls_view__2bN__\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userContainer\":\"users_userContainer__23y0q\",\"userDescription\":\"users_userDescription__2k5uR\",\"photo\":\"users_photo__keccs\",\"btnWrap\":\"users_btnWrap__rrXiP\",\"btnMode\":\"users_btnMode__1YS1R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__Skhn9\",\"paginator\":\"Paginator_paginator__3LTJU\",\"pageNumber\":\"Paginator_pageNumber__1ewMz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__3nKPT\",\"posts\":\"MyPosts_posts__2AnLT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2Y2SZ\",\"loginBlock\":\"Header_loginBlock__3xe43\"};"],"sourceRoot":""}