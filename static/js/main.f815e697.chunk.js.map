{"version":3,"sources":["API/api.ts","reportWebVitals.jsx","Components/Navbar/Navbar.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Redux/sidebar-reducer.tsx","Redux/app-reducer.tsx","Redux/Redux-store.tsx","hoc/WithSuspense.tsx","App.tsx","index.tsx","Redux/auth-reducer.tsx","Components/Header/Header.module.css","Redux/profile-reducer.tsx","Redux/dialogs-reducer.tsx","Components/Navbar/Navbar.module.css","validators/objects-helper.tsx","Redux/users-reducer.tsx"],"names":["instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","getUserProfile","userId","console","warn","profileAPI","deleteUnfollow","delete","postFollow","post","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","className","s","nav","item","to","activeClassName","activeLink","active","Header","props","header","src","alt","loginBlock","auth","isAuth","onClick","logoutTC","HeaderContainer","this","React","Component","connect","state","initialState","sidebarReducer","InitialState","initialized","reducers","combineReducers","profilePage","profileReducer","dialogsPage","dialogsReducer","sidebar","usersPage","usersReducer","authReducer","form","formReducer","app","action","type","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","WithSuspense","fallback","CircularProgress","size","DialogsContainer","lazy","UsersContainer","ProfileContainer","Login","News","Music","Setting","App","initializedApp","path","render","disableShrink","AppContainer","withRouter","dispatch","promise","getAuthUserDataTC","Promise","all","SamuraiJSApp","ReactDOM","document","getElementById","SET_USER_DATA","id","setUserDataAC","a","resultCode","LoginTC","message","messages","length","stopSubmit","_error","module","exports","posts","likesCount","profile","addPostAC","newBodyPost","updateSetStatus","newStatus","addPost","dialogs","name","addMessageAC","newMessageBody","body","updateObjectInArray","items","itemId","objPropertyName","newObjProps","map","u","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_FOLLOWING_PROGRESS","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFetching","isFetching","toggleFollowingProgress","requestUsers","page","users","totalUsersCount","totalCount","follow","unFollow","followingInProgress","portionSize","followed","filter"],"mappings":"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","file":"static/js/main.f815e697.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\n//отдельный экземпляр axios\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: { //передаем ключ\r\n        \"API-KEY\": \"1b870066-a689-4dee-839d-63ffa07d2f22\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`,)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n\r\n    },\r\n    getUserProfile(userId: string) {\r\n        console.warn('Obsolete method.Please profileAPI object');\r\n        return profileAPI.getUserProfile(userId);\r\n    },\r\n\r\n    deleteUnfollow(userId: number) {\r\n        return instance.delete('follow/' + userId)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    postFollow(userId: number) {\r\n        return instance.post('follow/' + userId)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    getUserProfile(userId = '15350') {\r\n        return instance.get(`profile/` + userId)\r\n            .then(response =>\r\n                 response.data)\r\n    },\r\n\r\n    getStatus(userId:number){\r\n        return instance.get(`profile/status/` + userId)\r\n            .then(response => response.data)\r\n    },\r\n    updateStatus(status:string){\r\n        return instance.put(`profile/status` , {status: status})\r\n            .then(response => response.data)\r\n    }\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n      return instance.get(`auth/me`)\r\n    },\r\n    login(email:string, password: string, rememberMe:boolean = false) {\r\n      return instance.post(`auth/login`, { email, password, rememberMe })\r\n    },\r\n    logout() {\r\n      return instance.delete(`auth/login`)\r\n    },\r\n\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n//let s = {\r\n //   'nav': 'Navbar_nav__17mde',\r\n//    'item': 'Navbar_item__11GBQ'\r\n//    'active': 'Navbar_active__6565cBQ'\r\n// let classNew = `${s.item} ${s.active}`;\r\n// }\r\n\r\nconst Navbar = () => {\r\n    return < nav className={s.nav} >\r\n    <div className= {s.item}>\r\n       <NavLink to=\"/profile\" activeClassName={s.activeLink}> Profile </NavLink>\r\n    </div>\r\n    <div className={`${s.item} ${s.active}`}>\r\n        <NavLink to=\"/dialogs\" activeClassName={s.activeLink}> Messages </NavLink>\r\n    </div>\r\n    <div className={s.item}>\r\n        <NavLink to=\"/news\" activeClassName={s.activeLink}> News </NavLink>\r\n    </div>\r\n    <div className={s.item}>\r\n        <NavLink to=\"/music\" activeClassName={s.activeLink}> Music </NavLink>\r\n    </div>\r\n    <div className={s.item}>\r\n        <NavLink to=\"/setting\" activeClassName={s.activeLink}> Settings </NavLink>\r\n    </div>\r\n        <div className={s.item}>\r\n        <NavLink to=\"/users\" activeClassName={s.activeLink}> Users </NavLink>\r\n    </div>\r\n        <div className={s.item}>\r\n        <NavLink to=\"/login\" activeClassName={s.activeLink}> Login </NavLink>\r\n    </div>\r\n    </nav>\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css';\r\nimport {HeaderContainerPropsType, MSTP} from \"./HeaderContainer\";\r\n\r\nfunction Header(props: HeaderContainerPropsType) {\r\nconst onClickLogout = () => {\r\n    props.logoutTC()\r\n}\r\n    return <header className={s.header}>\r\n        <img\r\n            src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSnGRPBfeIhYDR8QlaRPIbcUbBbeYupsOsUcQ&usqp=CAU' alt =\"\"/>\r\n\r\n   <div className={s.loginBlock}>\r\n       {\r\n           props.auth.isAuth\r\n               ? <div>{props.auth.login} - <button onClick={onClickLogout}>logout</button></div>\r\n               : <NavLink to={'/login'}>Login</NavLink>\r\n       }\r\n   </div>\r\n    </ header>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport {AuthStateType, logoutTC} from \"../../Redux/auth-reducer\";\r\n\r\nexport type MDTP = {\r\n    logoutTC : () => void\r\n}\r\n\r\nexport type MSTP = {\r\n    auth: AuthStateType\r\n}\r\nexport type HeaderContainerPropsType = MDTP & MSTP\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerPropsType> {\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props}/>;\r\n    }\r\n}\r\n\r\nexport const mapStateToProps = (state: AppStateType): MSTP => ({\r\n    auth: state.auth,\r\n})\r\nexport default connect<MSTP, MDTP, {}, AppStateType>(mapStateToProps, {logoutTC})(HeaderContainer);","\r\nlet initialState = {}\r\nconst sidebarReducer = (state: any = initialState, action: any) => {\r\n\r\n    return state\r\n}\r\n\r\nexport default sidebarReducer;","import { Dispatch } from \"redux\"\r\nimport {getAuthUserDataTC} from './auth-reducer';\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCSESS'\r\n\r\n\r\nlet InitialState: InitialStateType = {\r\n    initialized: false\r\n}\r\n\r\n\r\nexport const appReducer = (state= InitialState, action: ActionTypes)=> {\r\n\r\n\r\n    switch (action.type) {\r\n        case 'INITIALIZED_SUCCSESS':\r\n            return {...state, initialized: true}\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const initializedSuccess = () =>\r\n    ({type: INITIALIZED_SUCCESS} as const)\r\n\r\n//thunks\r\nexport const initializedAppTC = () => (dispatch: Dispatch<any>) => {\r\n    let promise = dispatch(getAuthUserDataTC())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}\r\n\r\n//types\r\ntype ActionTypes = ReturnType<typeof initializedSuccess>\r\ntype InitialStateType = { initialized: boolean }\r\n","import {applyMiddleware, combineReducers, createStore, compose} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleWare from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers( {\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(reducers,  composeEnhancers(\r\n    applyMiddleware(thunkMiddleWare)\r\n));\r\n//export let store = createStore(reducers, applyMiddleware(thunkMiddleWare));//applyMiddleware-прими промежуточные слои\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>","import React, {Suspense} from 'react';\r\nimport {CircularProgress} from '@material-ui/core';\r\n\r\n\r\nexport const WithSuspense = (Component: any) => {\r\n    return (props: any) => <Suspense fallback={<CircularProgress size={100}/>}>\r\n        <Component {...props}/>\r\n    </Suspense>\r\n}","import React from 'react';\nimport './App.css';\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\nimport HeaderContainer from \"./Components/Header/HeaderContainer\";\nimport {connect, Provider} from \"react-redux\";\nimport {AppStateType, store} from \"./Redux/Redux-store\";\nimport {compose} from \"redux\";\nimport {initializedAppTC} from \"./Redux/app-reducer\";\nimport {CircularProgress} from '@material-ui/core';\nimport {WithSuspense} from \"./hoc/WithSuspense\";\n\n\nconst DialogsContainer = React.lazy(() => import(\"./Components/Dialogs/DialogsContainer\"));\nconst UsersContainer = React.lazy(() => import(\"./Components/Users/UsersContainer\"));\nconst ProfileContainer = React.lazy(() => import( \"./Components/Profile/ProfileContainer\"));\nconst Login = React.lazy(() => import(\"./Components/login/Login\"));\nconst News = React.lazy(() => import(\"./Components/News/News\"));\nconst Music = React.lazy(() => import(\"./Components/Music/Music\"));\nconst Setting = React.lazy(() => import(\"./Components/Setting/Setting\"));\n\ntype MapDispatchToPropsType = {\n    initializedApp: () => void\n}\n\ntype MapStateToPropsType = {\n    initialized: boolean\n}\n\ntype AppPropsType = MapDispatchToPropsType & MapStateToPropsType\n\n\nclass App extends React.Component <AppPropsType, AppStateType> {\n    componentDidMount() {\n        this.props.initializedApp();\n\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <CircularProgress disableShrink\n                                     size={100}/>\n        }\n        return (\n            <div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navbar/>\n\n                <div className='app-wrapper-content'>\n\n                    <Route path={'/profile/:userId?'} render={WithSuspense(ProfileContainer)}/>\n                    <Route path={'/dialogs'} render={WithSuspense(DialogsContainer)}/>\n                    <Route path={'/news'} render={WithSuspense(News)}/>\n                    <Route path={'/music'} render={WithSuspense(Music)}/>\n                    <Route path={'/setting'} render={WithSuspense(Setting)}/>\n                    <Route path={'/users'} render={WithSuspense(UsersContainer)}/>\n                    <Route path={'/login'} render={WithSuspense(Login)}/>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {initialized: state.app.initialized}\n}\n\nconst AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializedApp: initializedAppTC}))\n(App)\n\n\nconst SamuraiJSApp = (props: any) => {\n    return <BrowserRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n\n}\n\nexport default SamuraiJSApp\n\n","import './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport SamuraiJSApp from \"./App\";\n\n\nReactDOM.render(\n    <SamuraiJSApp/>\n    , document.getElementById('root'));\n\nreportWebVitals();\n","import {authAPI} from \"../API/api\";\r\nimport {Dispatch} from \"react\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"auth/SET_USER_DATA\";\r\n\r\n\r\nlet initialState: AuthStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\n\r\n\r\nexport const authReducer = (state: AuthStateType = initialState, action: AuthActionType): AuthStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                id: action.userId,\r\n                email: action.email,\r\n                login: action.login,\r\n                isAuth: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// ACTIONS CREATORS\r\n\r\nexport const setUserDataAC = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) =>\r\n    ({type: SET_USER_DATA, userId, email, login, isAuth} as const)\r\n\r\n\r\n//thunks\r\nexport const getAuthUserDataTC = () => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response.data.resultCode === 0) {\r\n            let {id, login, email} = response.data.data\r\n            dispatch(setUserDataAC(id, login, email, true))\r\n        }\r\n    }\r\n}\r\n\r\nexport const LoginTC = (email: string, password: string, rememberMe: boolean) => {\r\n    return async (dispatch: Dispatch<any>) => {\r\n\r\n        let response = await authAPI.login(email, password, rememberMe)\r\n\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserDataTC())\r\n        } else {\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n            dispatch(stopSubmit(\"login\", {_error: `${message}`}))\r\n        }\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => {\r\n    return async (dispatch: Dispatch<AuthActionType>) => {\r\n\r\n        let response = await authAPI.logout()\r\n\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setUserDataAC(null, null, null, false))\r\n        }\r\n    }\r\n}\r\n//types\r\nexport type AuthStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\nexport type AuthActionType = ReturnType<typeof setUserDataAC>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2Y2SZ\",\"loginBlock\":\"Header_loginBlock__3xe43\"};","import {profileAPI, usersAPI} from \"../API/api\";\r\nimport {Dispatch} from \"react\";\r\n\r\n\r\n/*const ADD-POST = 'profile/ADD-POST'\r\nconst SET-USER-PROFILE = 'profile/SET-USER-PROFILE'\r\nconst SET-STATUS = 'profile/SET-STATUS'\r\nconst UPDATE-STATUS = 'profile/UPDATE-STATUS'*/\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 156},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 20},\r\n        {id: 3, message: 'BlaBla', likesCount: 10},\r\n        {id: 4, message: 'I am happy!', likesCount: 90},\r\n    ],\r\n    profile: null,\r\n    status: \"\"\r\n}\r\nconst profileReducer = (state: ProfilePageType = initialState, action: AllActionsType): ProfilePageType => {\r\n\r\n\r\n    switch (action.type) {\r\n\r\n        case \"ADD-POST\":\r\n            let stateCopy = {...state};\r\n            let addPost = {\r\n                id: state.posts[state.posts.length - 1].id + 1,\r\n                message: action.newBodyPost,\r\n                likesCount: 0\r\n            }\r\n            stateCopy = {\r\n                ...state,\r\n                posts: [...state.posts, addPost],   // копируем посты + пушим новый\r\n               /* newPostText: \"\"     */                // затираем ввод ввод после пуша\r\n            }\r\n            return stateCopy;\r\n\r\n       /* case \"UPDATE-NEW-POST-TEXT\": {\r\n            return {...state, newPostText: action.newText}\r\n        }*/\r\n\r\n        case \"REMOVE-POST\": {\r\n            return {...state, posts: {...state.posts}}\r\n            //return {...state, posts: {...state.posts.filter(p => p.id !=action.id)}}\r\n            //stateCopy.posts.filter(p => p.id !== action.id)\r\n\r\n            //return stateCopy\r\n        }\r\n\r\n        case \"SET-USER-PROFILE\": {\r\n            return {\r\n                ...state, profile: action.profile\r\n            }\r\n        }\r\n        case \"SET-STATUS\": {\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        }\r\n        case \"UPDATE-STATUS\": {\r\n            return {\r\n                ...state, status: action.newStatus\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// ACTIONS CREATORS\r\nexport const addPostAC = (newBodyPost:string): addPostActionType => ({type: \"ADD-POST\", newBodyPost});\r\nexport const removePost = (id: number): removePostActionType => ({type: \"REMOVE-POST\", id});\r\n/*export const updateNewPostText = (newText: string): updateNewPostTextActionType => ({\r\n    type: \"UPDATE-NEW-POST-TEXT\",\r\n    newText\r\n});*/\r\nexport const setUserProfile = (profile: ProfileType): setUserProfile => ({type: 'SET-USER-PROFILE', profile});\r\nexport const setStatus = (status: string) => ({type: 'SET-STATUS', status});\r\nexport const updateSetStatus = (newStatus: string) => ({type: 'UPDATE-STATUS', newStatus});\r\n\r\nexport type ProfileActionType =\r\n    | ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof removePost>/*\r\n    | ReturnType<typeof updateNewPostText>*/\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n    | ReturnType<typeof updateSetStatus>\r\n\r\ntype DispatchGetUserProfile = Dispatch<ProfileActionType>\r\n\r\n// THUNK CREATORS\r\nexport const getUserProfile = (userId: string) => {\r\n    return async (dispatch: DispatchGetUserProfile) => {\r\n        let response = await usersAPI.getUserProfile(userId)\r\n                dispatch(setUserProfile(response.data))\r\n    }\r\n};\r\n\r\nexport const getStatus =(userId: number) =>\r\n    async (dispatch: DispatchGetUserProfile) => {\r\n        let response = await profileAPI.getStatus(userId)\r\n                dispatch(setStatus(response.data))\r\n    };\r\n\r\n\r\nexport const updateStatus=(newStatus: string) =>\r\n    async (dispatch: Dispatch<ProfileActionType>) => {\r\n       let response= await profileAPI.updateStatus(newStatus)\r\n               if (response.resultCode === 0) {\r\n                    dispatch(updateSetStatus(newStatus))\r\n                }\r\n    };\r\n\r\n//types\r\n\r\nexport type ProfilePageType = {\r\n    posts: PostsType\r\n    /* newPostText: string*/\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\nexport type PostsType = Array<PostType>\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: Array<ContactsType>\r\n    lookingForAJob: true,\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number,\r\n    photos: Array<PhotosType>\r\n}\r\n\r\ntype ContactsType = {\r\n    facebook: string\r\n    website: null\r\n    vk: string\r\n    twitter: string\r\n    instagram: string\r\n    youtube: null\r\n    github: string\r\n    mainLink: null\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string\r\n    large: string\r\n}\r\ntype addPostActionType = { type: 'ADD-POST', newBodyPost:string }\r\ntype removePostActionType = { type: 'REMOVE-POST', id: number }\r\ntype setUserProfile = { type: 'SET-USER-PROFILE', profile: ProfileType }\r\ntype setStatus = { type: 'SET-STATUS', status: string }\r\ntype updateStatus = { type: 'UPDATE-STATUS', newStatus: string }\r\n\r\ntype AllActionsType = addPostActionType\r\n    | removePostActionType\r\n    | setUserProfile\r\n    | setStatus\r\n    | updateStatus\r\n\r\nexport default profileReducer;","export type dialogsPageType = {\r\n    dialogs: DialogsType\r\n    messages: MessagesType\r\n}\r\nexport type DialogsType = Array<DialogType>\r\nexport type MessagesType = Array<MessageType>\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype addMessageActionType = { type: 'TEXT-NEW-MESSAGE', newMessageBody: string}\r\ntype AllActionsType = addMessageActionType\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Andrey'},\r\n        {id: 2, name: 'Fredy'},\r\n        {id: 3, name: 'Nika'},\r\n        {id: 4, name: 'Sonia'},\r\n        {id: 5, name: 'Ray'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ]\r\n}\r\n\r\nconst dialogsReducer = (state: dialogsPageType = initialState, action: AllActionsType): dialogsPageType => {\r\n\r\n\r\n    switch (action.type) {\r\n\r\n        case \"TEXT-NEW-MESSAGE\":\r\n\r\n           /* let newMessage = {\r\n                id: 6,\r\n                message: action.newMessageBody\r\n            }\r\n            stateCopy = {...state,\r\n                messages: [...state.messages, newMessage],\r\n                textNewMessages: \"\"\r\n            }\r\n            return stateCopy;*/\r\n            let body = action.newMessageBody\r\n            return  {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const addMessageAC = (newMessageBody:string): addMessageActionType => ({type: \"TEXT-NEW-MESSAGE\",newMessageBody});\r\n\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__32qPF\",\"item\":\"Navbar_item__3Qt17\",\"activeLink\":\"Navbar_activeLink__2ovIU\"};","\r\n\r\nexport const updateObjectInArray = (items: Array<any>, itemId: any, objPropertyName: any, newObjProps: any) => {\r\n   return  items.map(u => {\r\n            if (u[objPropertyName] === itemId) {\r\n                return {...u, ...newObjProps}\r\n            }\r\n            return u\r\n        }\r\n    )\r\n}","import {usersAPI} from \"../API/api\";\r\nimport {Dispatch} from \"react\";\r\nimport {updateObjectInArray} from \"../validators/objects-helper\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET-USERS\";\r\nconst SET_CURRENT_PAGE = \"SET-CURRENT-PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET-TOTAL-USERS-COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\";\r\nconst TOGGLE_FOLLOWING_PROGRESS = \"TOGGLE-FOLLOWING-PROGRESS\";\r\n\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users:updateObjectInArray(state.users, action.userId, \"id\",\r\n                    {followed: true})\r\n\r\n                /*users: state.users.map((u) => {\r\n                        if (u.id === action.userId) {\r\n                            return {...u, followed: true}\r\n                        }\r\n                        return u\r\n                    } )*/\r\n\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users:updateObjectInArray(state.users, action.userId, \"id\",\r\n                    {followed: false})\r\n\r\n                /* users: state.users.map((u) => {\r\n                         if (u.id === action.userId) {\r\n                             return {...u, followed: false}\r\n                         }\r\n                         return u\r\n                     }\r\n                 )*/\r\n            }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state, users: action.users\r\n            }\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {\r\n                ...state, currentPage: action.currentPage\r\n            }\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {\r\n                ...state, totalUsersCount: action.totalCount\r\n            }\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {\r\n                ...state, isFetching: action.isFetching\r\n            }\r\n        }\r\n        case TOGGLE_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state, followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId] :\r\n                    state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// ACTIONS CREATORS\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccess = (userId: number) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UsersType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage: currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalCount: totalUsersCount\r\n} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_FOLLOWING_PROGRESS, isFetching,\r\n    userId\r\n} as const)\r\n\r\n\r\n\r\n\r\n//ThunkCreator\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n    return async (dispatch: DispatchType) => {\r\n\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(page));\r\n        let data = await usersAPI.getUsers(page, pageSize)\r\n        dispatch(toggleIsFetching(false))\r\n        dispatch(setUsers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\nconst followUnfollowFlow = (dispatch:DispatchType, userId: number, apiMethod:any, actionCreator:any) => {\r\n    return async (dispatch: DispatchType) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        //хотим отписаться и делаем post-запрос на сервер\r\n        let data = await apiMethod(userId)\r\n        if (data.resultCode == 0) {\r\n            dispatch(actionCreator(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: DispatchType) => {\r\n        // let apiMethod = usersAPI.postFollow.bind(usersAPI)\r\n        // let actionCreator = followSuccess\r\n        // followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n\r\n        const result = await usersAPI.postFollow(userId);\r\n        if (result.resultCode === 0) {\r\n            dispatch(followSuccess(userId))\r\n        }\r\n\r\n        // followUnfollowFlow(dispatch, userId, usersAPI.postFollow.bind(usersAPI),followSuccess)\r\n\r\n        // dispatch(toggleFollowingProgress(true, userId))\r\n        // //хотим подписаться и делаем post-запрос на сервер\r\n        // let data = await apiMethod(userId)\r\n        // if (data.resultCode == 0) {\r\n        //     dispatch(actionCreator(userId))\r\n        // }\r\n        // dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\nexport const unFollow = (userId: number) => {\r\n\r\n    return async (dispatch: DispatchType) => {\r\n        // let apiMethod = usersAPI.deleteUnfollow.bind(usersAPI)\r\n        // let actionCreator = unfollowSuccess\r\n        // followUnfollowFlow(dispatch, userId, apiMethod, actionCreator)\r\n        // //followUnfollowFlow(dispatch, userId, usersAPI.deleteUnfollow.bind(usersAPI),unfollowSuccess)\r\n\r\n        const res = await usersAPI.deleteUnfollow(userId);\r\n        if(res.resultCode === 0) {\r\n            dispatch(unfollowSuccess(userId))\r\n        }\r\n\r\n\r\n        // dispatch(toggleFollowingProgress(true, userId))\r\n        // //хотим отписаться и делаем post-запрос на сервер\r\n        // let data = await apiMethod(userId)\r\n        // if (data.resultCode == 0) {\r\n        //     dispatch(actionCreator(userId))\r\n        // }\r\n        // dispatch(toggleFollowingProgress(false, userId))\r\n    }\r\n}\r\n\r\n\r\n//types\r\ntype ActionsType =\r\n    | ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\ntype DispatchType = Dispatch<ActionsType>\r\n\r\nexport type UsersType =\r\n    {\r\n        name: string,\r\n        id: number,\r\n        uniqueUrlName: null,\r\n        photos: {\r\n            small: string | undefined,\r\n            large: string | undefined\r\n        },\r\n        status: null,\r\n        followed: boolean,\r\n\r\n    }\r\n\r\n\r\nexport let initialState: UsersStateType = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,//текущая страница\r\n    isFetching: true,\r\n    followingInProgress: [],\r\n    portionSize: 10\r\n}\r\nexport type UsersStateType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n    portionSize: number\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport default usersReducer;\r\n\r\n\r\n\r\n"],"sourceRoot":""}