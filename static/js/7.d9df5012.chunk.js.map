{"version":3,"sources":["Components/common/FormsControls/FormsControls.module.css","validators/validators.tsx","Components/common/FormsControls/FormsControls.tsx","Components/login/Login.tsx"],"names":["module","exports","requiredField","value","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","element","className","style","formControl","Textarea","props","restProps","child","Input","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","placeholder","name","component","validate","password","type","formSummaryError","connect","state","isAuth","auth","LoginTC","to","data","email","rememberMe"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wCAAwC,SAAW,gCAAgC,mBAAmB,wCAAwC,KAAO,8B,iCCChR,oEAAO,IAAMC,EAAgB,SAACC,GAC1B,IAAIA,EACJ,MAAO,qBASEC,EAAkB,SAACC,GAAD,OAAmB,SAACF,GAC/C,GAAIA,GAASA,EAAMG,OAASD,EAAU,MAAM,iBAAN,OAAwBA,EAAxB,e,kKCsBpCE,EAAc,SAAC,GAA2D,EAA1DC,MAA2D,IAAD,IAAnDC,KAAMC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,MAAQC,EAA4B,EAA5BA,SAC1CC,GADsE,EAAlBC,QACzCJ,GAAWC,GAE5B,OACI,sBAAKI,UAAWC,IAAMC,YAAc,KAAOJ,EAAWG,IAAML,MAAQ,IAApE,UACI,8BACKC,IAEL,8BACKC,GAAY,sBAAME,UAAWC,IAAML,MAAvB,SAA+BA,UAM/CO,EAAW,SAACC,GAA8B,IAC5CX,EAAoCW,EAApCX,MAAuBY,GAAaD,EAA7BV,KAA6BU,EAAvBE,MAD8B,YACPF,EADO,2BAElD,OAAO,cAACZ,EAAD,2BAAiBY,GAAjB,aAAwB,oDAAcX,GAAWY,QAG/CE,EAAQ,SAACH,GAAgB,IAC3BX,EAAoCW,EAApCX,MAAuBY,GAAaD,EAA7BV,KAA6BU,EAAvBE,MADa,YACUF,EADV,2BAEjC,OAAO,cAACZ,EAAD,2BAAiBY,GAAjB,aAAwB,iDAAWX,GAAWY,S,iCC1DzD,oGA+CMG,EAAiBC,YAAwB,CAACC,KAAM,SAA/BD,EA3BsC,SAACL,GAC1D,OACI,uBAAMO,SAAUP,EAAMQ,aAAtB,UAII,8BACI,cAAC,IAAD,CAAOC,YAAa,QAASC,KAAM,QAASC,UAAWR,IAChDS,SAAU,CAAC7B,SAEtB,qBAAKa,UAAWC,IAAMgB,SAAtB,SACI,cAAC,IAAD,CAAOJ,YAAa,WAAYC,KAAM,WAAYC,UAAWR,IACtDS,SAAU,CAAC7B,KAAgB+B,KAAM,eAE5C,gCACI,cAAC,IAAD,CAAOA,KAAM,WAAYJ,KAAM,aAAcC,UAAW,UAD5D,kBAICX,EAAMR,OAAS,qBAAKI,UAAWC,IAAMkB,iBAAtB,SAAyCf,EAAMR,QAC/D,8BACI,oDA8BDwB,uBANS,SAACC,GACrB,MAAO,CACHC,OAASD,EAAME,KAAKD,UAIY,CAACE,aAA1BJ,EApBD,SAAChB,GAIf,OAAGA,EAAMkB,OACE,cAAC,IAAD,CAAUG,GAAI,aAIjB,8BACI,cAACjB,EAAD,CAAgBG,SATN,SAACe,GACftB,EAAMoB,QAAQE,EAAKC,MAAOD,EAAKT,SAAUS,EAAKE","file":"static/js/7.d9df5012.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__wIBbp\",\"error\":\"FormsControls_error__fVdQ7\",\"formSummaryError\":\"FormsControls_formSummaryError__1lCuv\",\"password\":\"FormsControls_password__2Kl3v\",\"password-control\":\"FormsControls_password-control__2n0rD\",\"view\":\"FormsControls_view__2bN__\"};","import React from 'react';\r\n\r\nexport const requiredField = (value:any) => {\r\n    if (value)return undefined\r\n    return 'Field is required';\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const maxLengthCreator= (maxLength:any) => (value:any) => {\r\n    if (value && value.length > maxLength)return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n\r\n}\r\n/*export const maxLength30 = (value:any) => {\r\n    if (value && value.length > 30)return \"Max length is 30 symbols\"\r\n    return undefined;\r\n\r\n}*/\r\n\r\n\r\n","import React from 'react';\r\nimport style from './FormsControls.module.css';\r\nimport {Field} from \"redux-form\";\r\nimport {requiredField} from \"../../../validators/validators\";\r\n\r\n\r\ntype TextareaPropsType = HTMLFormElement & { placeholder: string }\r\n\r\n\r\n/*\r\n\r\nexport const Textarea = (props:any) => {\r\n    const {input,meta,child,...restProps} = props\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={style.formControl  + \" \" + (hasError ? style.error: \"\")}>\r\n            <div>\r\n                <textarea {...props.input} {...props}/>\r\n            </div>\r\n            {hasError &&<span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = (props:any) => {\r\n    const {input,meta,child,...restProps} = props\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={style.formControl  + \" \" + (hasError ? style.error: \"\")}>\r\n            <div>\r\n                <textarea {...props.input} {...props}/>\r\n            </div>\r\n            {hasError &&<span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}*/\r\nconst FormControl = ({input, meta:{touched, error}, children, element}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span className={style.error}>{error}</span>}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}></input></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: any, name: any, validators: any, component: any, props:any ={}, text:string = \"\") =>\r\n    <div> <Field placeholder={placeholder}\r\n                 name={name} component={validators}\r\n                 validate={component} {...props}/>{text}</div>","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form';\r\nimport {createField, Input, Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {requiredField} from \"../../validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {LoginTC} from \"../../Redux/auth-reducer\";\r\nimport {Redirect} from \"react-router\";\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport style from \"./../common/FormsControls/FormsControls.module.css\"\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ntype LoginPropsType = {\r\n    LoginTC: (email: string, password: string, rememberMe: boolean) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n           {/* {createField(\"Email\",\"email\", [requiredField],Input)}\r\n            {createField(\"Password\",\"password\", [requiredField],Input, {type: \" password\"})}\r\n            {createField(null,\"rememberMe\", null,Input, {type: \" checkbox\"}, \"remember me\")}*/}\r\n            <div>\r\n                <Field placeholder={\"Email\"} name={\"email\"} component={Input}\r\n                       validate={[requiredField]}/>\r\n            </div>\r\n            <div className={style.password}>\r\n                <Field placeholder={\"Password\"} name={\"password\"} component={Input}\r\n                       validate={[requiredField]} type={'password'}/>\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={\"input\"}\r\n                     /> remember me\r\n            </div>\r\n            {props.error && <div className={style.formSummaryError}>{props.error}</div>}\r\n            <div>\r\n                <button>Log in</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm);\r\n\r\n\r\nconst Login = (props:LoginPropsType) => {\r\n    const onSubmitT = (data: FormDataType) => {\r\n        props.LoginTC(data.email, data.password, data.rememberMe)\r\n    }\r\nif(props.isAuth) {\r\n    return <Redirect to={\"/profile\"}/>\r\n}\r\n\r\n    return (\r\n        <div>\r\n            <LoginReduxForm onSubmit={onSubmitT}/>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state:AppStateType)  => {\r\n    return {\r\n        isAuth : state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {LoginTC}) (Login)\r\n\r\n\r\n/*\r\n$('body').on('click', '.password-control', function(){\r\n    if ($('#password-input').attr('type') == 'password'){\r\n        $(this).addClass('view');\r\n        $('#password-input').attr('type', 'text');\r\n    } else {\r\n        $(this).removeClass('view');\r\n        $('#password-input').attr('type', 'password');\r\n    }\r\n    return false;\r\n});*/\r\n"],"sourceRoot":""}