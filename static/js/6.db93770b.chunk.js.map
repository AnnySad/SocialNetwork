{"version":3,"sources":["Components/common/FormsControls/FormsControls.module.css","validators/validators.tsx","Components/common/FormsControls/FormsControls.tsx","Components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/AddMessageFormRedux/AddMessageFormRedux.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","requiredField","value","maxLengthCreator","maxLength","length","FormControl","input","meta","touched","error","children","hasError","element","className","style","formControl","Textarea","props","restProps","child","Input","mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","to","React","connect","DialogItem","path","id","s","dialog","active","name","Message","massage","message","maxLength50","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","validate","Dialogs","dialogsElements","dialogs","map","d","messageElements","messages","m","dialogsItem","massages","formData","addMessageAC","newMessageBody","compose","dialogsPage"],"mappings":"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","file":"static/js/6.db93770b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__wIBbp\",\"error\":\"FormsControls_error__fVdQ7\",\"formSummaryError\":\"FormsControls_formSummaryError__1lCuv\",\"password\":\"FormsControls_password__2Kl3v\",\"password-control\":\"FormsControls_password-control__2n0rD\",\"view\":\"FormsControls_view__2bN__\"};","import React from 'react';\r\n\r\nexport const requiredField = (value:any) => {\r\n    if (value)return undefined\r\n    return 'Field is required';\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const maxLengthCreator= (maxLength:any) => (value:any) => {\r\n    if (value && value.length > maxLength)return `Max length is ${maxLength} symbols`\r\n    return undefined;\r\n\r\n}\r\n/*export const maxLength30 = (value:any) => {\r\n    if (value && value.length > 30)return \"Max length is 30 symbols\"\r\n    return undefined;\r\n\r\n}*/\r\n\r\n\r\n","import React from 'react';\r\nimport style from './FormsControls.module.css';\r\nimport {Field} from \"redux-form\";\r\nimport {requiredField} from \"../../../validators/validators\";\r\n\r\n\r\ntype TextareaPropsType = HTMLFormElement & { placeholder: string }\r\n\r\n\r\n/*\r\n\r\nexport const Textarea = (props:any) => {\r\n    const {input,meta,child,...restProps} = props\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={style.formControl  + \" \" + (hasError ? style.error: \"\")}>\r\n            <div>\r\n                <textarea {...props.input} {...props}/>\r\n            </div>\r\n            {hasError &&<span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = (props:any) => {\r\n    const {input,meta,child,...restProps} = props\r\n    const hasError = meta.touched && meta.error\r\n    return(\r\n        <div className={style.formControl  + \" \" + (hasError ? style.error: \"\")}>\r\n            <div>\r\n                <textarea {...props.input} {...props}/>\r\n            </div>\r\n            {hasError &&<span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}*/\r\nconst FormControl = ({input, meta:{touched, error}, children, element}: any) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={style.formControl + ' ' + (hasError ? style.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span className={style.error}>{error}</span>}\r\n            </div>\r\n        </div>)\r\n}\r\n\r\n\r\nexport const Textarea = (props: TextareaPropsType) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}></textarea></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input} {...restProps}></input></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: any, name: any, validators: any, component: any, props:any ={}, text:string = \"\") =>\r\n    <div> <Field placeholder={placeholder}\r\n                 name={name} component={validators}\r\n                 validate={component} {...props}/>{text}</div>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3JopZ\",\"dialog\":\"Dialogs_dialog__2sWkh\",\"dialogsItem\":\"Dialogs_dialogsItem__2nKwx\",\"active\":\"Dialogs_active__r35ya\",\"massages\":\"Dialogs_massages__irC8F\",\"massage\":\"Dialogs_massage__2rizI\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router\";\r\nimport {AppStateType} from \"../Redux/Redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any> {\r\n\r\n        render() {\r\n\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}> {props.name} </NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype messageType ={\r\n    message: string\r\n}\r\nconst Message = (props:messageType) => {\r\n    return <div className={s.massage}> {props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport {maxLengthCreator, requiredField} from \"../../../validators/validators\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nexport type MessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\nconst maxLength50=maxLengthCreator(50)\r\nconst AddMessageForm: React.FC<InjectedFormProps<MessageFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newMessageBody\"\r\n                       placeholder=\"Enter your massage\"\r\n                       component={Textarea}\r\n                       validate={[requiredField,maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport const AddMessageFormRedux = reduxForm<MessageFormDataType>({form: \"dialogAddMassageForm\"})(AddMessageForm)\r\n","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {addMessageAC, DialogType, MessageType} from \"../../Redux/dialogs-reducer\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../validators/validators\";\r\nimport {AddMessageFormRedux, MessageFormDataType} from \"./AddMessageFormRedux/AddMessageFormRedux\";\r\n\r\n\r\n\r\nexport type DialogsType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n    //textNewMessages: string\r\n    isAuth: boolean\r\n    addMessageAC: (text: string) => void\r\n    // newMessageBody: string\r\n    //updateMessage: (body: string) => void\r\n}\r\n\r\n\r\nconst Dialogs: React.FC<DialogsType> = (props) => {\r\n\r\n    // из массива объектов dialogsData, преобразуем/мапим в массив элементов\r\n    let dialogsElements = props.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n\r\n    let messageElements = props.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n    let addNewMessage = (formData: MessageFormDataType) => {\r\n        props.addMessageAC(formData.newMessageBody)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n\r\n            <div className={s.massages}>\r\n                <div>{messageElements}</div>\r\n            </div>\r\n            <div><AddMessageFormRedux onSubmit={addNewMessage}/></div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {AppStateType} from \"../../Redux/Redux-store\";\r\nimport {addMessageAC, DialogType, MessageType} from \"../../Redux/dialogs-reducer\";\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose, Dispatch} from \"redux\";\r\n\r\n\r\ntype MSTPType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n\r\n}\r\n\r\ntype MDTPType = {\r\n    addMessageAC: (text: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogs,\r\n        isAuth: state.auth.isAuth,\r\n        messages: state.dialogsPage.messages\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MSTPType, MDTPType, {}, AppStateType>(mapStateToProps, {addMessageAC}),\r\n    WithAuthRedirect)(Dialogs); //суть , возьми Dialogs, закинь в WithAuthRedirect, потом что получилось в connect(mapStateToProps,mapDispatchToProps),\r\n\r\n\r\n"],"sourceRoot":""}